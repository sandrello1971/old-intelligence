from datetime import datetime, timedelta
from pprint import pprint
import json

from app.services.crm_parser import extract_opportunities_from_description, extract_services_from_description
from integrations.crm_incloud.opportunity import create_crm_opportunity
from integrations.crm_incloud.activity import create_crm_activity
from integrations.crm_incloud.sync import sync_single_activity
from app.models.ticket import Ticket
from app.models.company import Company
from app.models.opportunity import Opportunity
from app.models.activity import Activity
from app.models.milestone import Milestone
from app.models.phase_template import PhaseTemplate
from app.models.service_user_association import ServiceUserAssociation
from app.models.task import Task
from app.core.database import SessionLocal

DEFAULT_ACTIVITY_SUBTYPE = 63688
DEFAULT_ACTIVITY_PRIORITY = 0
DEFAULT_ACTIVITY_STATE = 2

def get_service_owner(service_code: str, db_session):
    """Trova l'owner di un servizio dalle associazioni"""
    try:
        # Importa SubType per il join (potrebbe non essere gi√† importato)
        from app.models.sub_type import SubType
        
        association = db_session.query(ServiceUserAssociation).join(
            SubType, ServiceUserAssociation.service_id == SubType.id
        ).filter(SubType.code == service_code).first()
        
        if association:
            print(f"‚úÖ Owner trovato per servizio {service_code}: {association.user_id}")
            return association.user_id
        else:
            print(f"‚ö†Ô∏è Nessuna associazione trovata per servizio {service_code}")
            return None
    except Exception as e:
        print(f"‚ùå Errore ricerca owner per {service_code}: {e}")
        return None

def create_and_sync_opportunities(ticket: Ticket, db_session=None):
    if db_session is None:
        db_session = SessionLocal()

    if not ticket.customer_name:
        raise Exception(f"Ticket ID {ticket.id} - Manca il nome dell'azienda.")
    if not ticket.owner:
        raise Exception(f"Ticket ID {ticket.id} - Manca l'owner.")
    if not ticket.activity:
        raise Exception(f"Ticket ID {ticket.id} - Nessuna attivit√† collegata.")
    open_tasks = db_session.query(Task).filter(Task.ticket_id == ticket.id, Task.status != "chiuso").all()
    if open_tasks:
        raise Exception(f"Ticket ID {ticket.id} - Task ancora aperti: {[t.title for t in open_tasks]}")

    company = db_session.query(Company).filter(Company.nome == ticket.customer_name.strip()).first()
    if not company:
        raise Exception(f"Azienda '{ticket.customer_name}' non trovata.")

    services = ticket.activity.detected_services or []
    if isinstance(services, str):
        try:
            services = json.loads(services)
        except json.JSONDecodeError:
            services = services.replace("{", "").replace("}", "").replace('"', '').split(",")
            services = [s.strip() for s in services if s.strip()]

    created = []

    for service in services:
        extracted_codes = extract_opportunities_from_description("", [service])
        if not extracted_codes:
            print(f"‚ö†Ô∏è Nessun codice rilevato per servizio: {service}")
            continue

        opp_code = extracted_codes[0]
        opportunity_code = f"{opp_code}-{ticket.id}"

        existing = db_session.query(Opportunity).filter(
            Opportunity.codice == opportunity_code,
            Opportunity.cliente == ticket.customer_name
        ).first()
        if existing:
            print(f"‚èΩ Opportunit√† gi√† esistente: {opportunity_code}")
            continue

        payload = {
            "title": f"[{opp_code}] - {ticket.customer_name}",
            "crossId": company.id,
            "ownerId": int(ticket.activity.accompagnato_da) if ticket.activity.accompagnato_da else int(ticket.owner_id),
            "salesPersons": [int(ticket.activity.owner_id) if ticket.activity.owner_id else int(ticket.owner_id)],
            "description": f"Opportunit√† per servizio {opp_code}. Origine ticket: {ticket.ticket_code}",
            "phase": 53002,
            "category": 25309,
            "status": 1,
            "budget": 0,
            "amount": 0,
            "closeDate": datetime.utcnow().isoformat(),
            "code": opportunity_code
        }

        print("üì§ Payload opportunit√†:", payload)
        response = create_crm_opportunity(payload)
        if not response or not isinstance(response, (int, str)):
            raise Exception(f"Errore CRM: risposta non valida ({response})")

        opportunity_id = int(response)

        local_opportunity = Opportunity(
            id=opportunity_id,
            titolo=payload["title"],
            cliente=ticket.customer_name,
            descrizione=payload["description"],
            stato=payload["status"],
            fase=payload["phase"],
            probabilita=0,
            data_chiusura=payload["closeDate"],
            data_creazione=datetime.utcnow(),
            data_modifica=datetime.utcnow(),
            proprietario=ticket.owner,
            commerciale=ticket.owner_id,
            codice=opportunity_code,
            categoria=payload["category"],
            ammontare=payload["amount"]
        )

        db_session.add(local_opportunity)
        db_session.commit()

        created.append({
            "opportunity": opportunity_code,
            "opportunity_id": opportunity_id,
            "opportunity_title": payload["title"],
            "ticket_id": ticket.id
        })

    return {"created_opportunities": created, "count": len(created)}

def generate_activities_from_opportunity(opportunity_id: int, db_session=None):
    print(f"üîÅ Avvio generazione attivit√† da opportunit√† ID: {opportunity_id}")
    if db_session is None:
        db_session = SessionLocal()

    opportunity = db_session.query(Opportunity).filter(Opportunity.id == opportunity_id).first()
    if not opportunity:
        raise Exception(f"Opportunit√† con ID {opportunity_id} non trovata.")

    company = db_session.query(Company).filter(Company.nome == opportunity.cliente).first()
    if not company:
        raise Exception(f"Azienda '{opportunity.cliente}' non trovata.")

    opp_code = opportunity.codice.split("-")[0]
    milestones = db_session.query(Milestone).filter(Milestone.project_type == opp_code).order_by(Milestone.order).all()

    created_activities = []

    for ticket_seq, milestone in enumerate(milestones, start=1):
        # üîÑ NUOVA LOGICA: Usa associazioni service-user
        opp_code = opportunity.codice.split("-")[0]
        service_owner = get_service_owner(opp_code, db_session)
        actual_owner = service_owner if service_owner else int(opportunity.commerciale)
        
        print(f"üéØ Servizio {opp_code}: Owner associato = {service_owner}, Owner usato = {actual_owner}")

        payload = {
            "title": milestone.name,
            "activityDate": datetime.utcnow().isoformat(),
            "activityEndDate": datetime.utcnow().isoformat(),
            "allDay": False,
            "classification": 0,
            "commercial": False,
            "companyId": company.id,
            "createdById": actual_owner,
            "createdDate": datetime.utcnow().isoformat(),
            "duration": 0,
            "opportunityId": opportunity.id,
            "ownerId": actual_owner,
            "priority": DEFAULT_ACTIVITY_PRIORITY,
            "state": DEFAULT_ACTIVITY_STATE,
            "subject": f"{milestone.name} ({milestone.project_type})",
            "description": f"Generata attivit√† per Fase '{milestone.name}'",
            "toDo": 0,
            "type": 7,
            "subTypeId": DEFAULT_ACTIVITY_SUBTYPE,
            "idCompanion": int(opportunity.commerciale)
        }

        print("üì§ Payload attivit√† CRM:")
        pprint(payload)
        try:
            crm_activity_id = create_crm_activity(payload)
            print(f"üü¢ Attivit√† CRM creata: {crm_activity_id}")
        except Exception as e:
            print(f"‚ùå Errore attivit√† CRM: {e}")
            continue

        activity = sync_single_activity(int(crm_activity_id), db_session)
        if activity:
            created_activities.append(activity.id)

            suffix = str(activity.id)[-4:]
            ticket_code = f"TCK-{opp_code}-{suffix}-{ticket_seq:02}"

            ticket = Ticket(
                activity_id=activity.id,
                ticket_code=ticket_code,
                title=f"{milestone.name} - {ticket_code}",
                description="Creato da Fase CRM",
                customer_name=company.nome,
                priority=2,
                status=0,
                owner=opportunity.proprietario,
                owner_id=opportunity.commerciale,
                account=opportunity.proprietario,
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow(),
                due_date=datetime.utcnow() + timedelta(days=5)
            )

            db_session.add(ticket)
            db_session.flush()

            task_templates = db_session.query(PhaseTemplate).filter(PhaseTemplate.milestone_id == milestone.id).all()
            for task_template in task_templates:
                task = Task(
                    ticket_id=ticket.id,
                    title=task_template.description,
                    status="aperto",
                    priority="media",
                    owner=str(actual_owner),
                    customer_name=company.nome,
                    description=task_template.description
                )
                db_session.add(task)

    db_session.commit()
    return {"created_activities": created_activities}
