import os
import re
import logging
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from app.models.ticket import Ticket
from app.models.task import Task
from app.models.activity import Activity
from app.models.service_user_association import ServiceUserAssociation
from app.models.sub_type import SubType
from process_code_map import PROCESS_CODE_MAP
from integrations.crm_incloud.activity import create_crm_activity

logger = logging.getLogger(__name__)

# ✅ FIX: Lazy loading OpenAI client per evitare errore all'import
_openai_client = None

def get_openai_client():
    """Inizializza OpenAI client solo quando necessario"""
    global _openai_client
    if _openai_client is None:
        try:
            from openai import OpenAI
            api_key = os.getenv("OPENAI_API_KEY")
            if not api_key:
                print("⚠️ OPENAI_API_KEY non configurata - funzioni AI disabilitate")
                return None
            _openai_client = OpenAI(api_key=api_key)
        except Exception as e:
            print(f"⚠️ Errore inizializzazione OpenAI: {e}")
            return None
    return _openai_client

# Usa lazy loading invece di inizializzazione immediata
MODEL = os.getenv("OPENAI_MODEL", "gpt-4-turbo")

STATUS_MAP = {"aperta": 0, "in corso": 1, "completata": 2}
PRIORITY_CRM = {1: "High", 2: "Medium", 3: "Low"}

DEFAULT_TASKS_I24 = [
    "Predisposizione incarico",
    "Invio incarico",
    "Firma incarico"
]

def get_service_labels(db_session: Session) -> dict:
    """Ottiene mapping code->name dinamico dalla tabella sub_types"""
    try:
        subtypes = db_session.query(SubType).all()
        service_labels = {st.code: st.name for st in subtypes}
        print(f"[DEBUG] Service labels dinamici caricati: {len(service_labels)} servizi")
        return service_labels
    except Exception as e:
        print(f"[ERROR] Errore caricamento service labels: {e}")
        # Fallback hardcoded
        return {
            "F40": "Formazione 4.0",
            "KHW": "Know How", 
            "T50": "Transizione 5.0",
            "PBX": "Patent Box",
            "CBK": "Cashback",
            "FND": "Finanziamenti",
            "BND": "Bandi",
            "CLB": "Collaborazione",
            "GEN": "Generico",
            "ALT": "Altro",
            "I24": "Incarico 24 mesi"
        }

def get_service_owner(service_code: str, db_session):
    """Trova l'owner di un servizio dalle associazioni"""
    try:
        association = db_session.query(ServiceUserAssociation).join(
            SubType, ServiceUserAssociation.service_id == SubType.id
        ).filter(SubType.code == service_code).first()
        
        if association:
            print(f"✅ Owner trovato per servizio {service_code}: {association.user_id}")
            return association.user_id
        else:
            print(f"⚠️ Nessuna associazione trovata per servizio {service_code}")
            return None
    except Exception as e:
        print(f"❌ Errore ricerca owner per {service_code}: {e}")
        return None

def send_ticket_notification(ticket_id: int, db_session) -> bool:
    """Invia notifica creazione ticket"""
    try:
        from app.services.email_service import email_service
        from app.models.user import User
        
        ticket = db_session.query(Ticket).filter(Ticket.id == ticket_id).first()
        if not ticket:
            logger.error(f"Ticket {ticket_id} not found for notification")
            return False
        
        # Determina owner
        owner_id = ticket.owner_id
        if not owner_id:
            logger.error(f"No owner found for ticket {ticket_id}")
            return False
            
        # Get user email
        owner = db_session.query(User).filter(User.id == str(owner_id)).first()
        if not owner or not owner.email:
            logger.error(f"Owner {owner_id} not found or no email for ticket {ticket_id}")
            return False
            
        # Send email
        success = email_service.send_email(
            to_email=owner.email,
            subject=f"🧠 Intelligence - Nuovo Ticket I24: {ticket.title}",
            html_body=f"""
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px 8px 0 0;">
                    <h1 style="margin: 0;">🧠 Intelligence Platform</h1>
                    <h2 style="margin: 10px 0 0 0;">Nuovo Incarico 24 Mesi</h2>
                </div>
                
                <div style="background: #f8f9fa; padding: 30px; border-radius: 0 0 8px 8px;">
                    <p>Ciao <strong>{owner.name}</strong>,</p>
                    <p>È stato creato un nuovo Incarico 24 mesi:</p>
                    
                    <div style="background: white; border-radius: 8px; padding: 20px; margin: 20px 0; border-left: 4px solid #28a745;">
                        <h3 style="margin-top: 0; color: #333;">{ticket.title}</h3>
                        <p><strong>Codice:</strong> {ticket.ticket_code}</p>
                        <p><strong>Cliente:</strong> {ticket.customer_name or 'N/A'}</p>
                        <p><strong>Account:</strong> {ticket.account or 'N/A'}</p>
                        <p><strong>Scadenza:</strong> {ticket.due_date.strftime('%d/%m/%Y') if ticket.due_date else 'Non specificata'}</p>
                    </div>
                    
                    <p style="text-align: center; margin: 30px 0;">
                        <a href="https://intelligence.enduser-digital.com/dashboard/ticket/{ticket.id}" 
                           style="background: #28a745; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
                            Visualizza Incarico I24
                        </a>
                    </p>
                    
                    <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
                    <p style="font-size: 12px; color: #666;">
                        Ricevi questa email perché sei il responsabile di questo incarico I24.
                    </p>
                </div>
            </div>
            """,
            text_body=f"""
            Intelligence Platform - Nuovo Incarico 24 Mesi
            
            Ciao {owner.name},
            
            È stato creato un nuovo Incarico 24 mesi:
            
            Titolo: {ticket.title}
            Codice: {ticket.ticket_code}
            Cliente: {ticket.customer_name or 'N/A'}
            Account: {ticket.account or 'N/A'}
            Scadenza: {ticket.due_date.strftime('%d/%m/%Y') if ticket.due_date else 'Non specificata'}
            
            Visualizza: https://intelligence.enduser-digital.com/dashboard/ticket/{ticket.id}
            """
        )
        
        if success:
            logger.info(f"Email notification sent successfully for ticket {ticket_id}")
        else:
            logger.warning(f"Email notification failed for ticket {ticket_id}")
            
        return success
        
    except Exception as e:
        logger.error(f"Error sending ticket notification: {e}")
        return False

def gtd_priority_to_int(priority: str) -> int:
    mapping = {"alta": 1, "media": 2, "bassa": 3}
    return mapping.get(priority.lower().strip(), 2) if isinstance(priority, str) else 2

def extract_project_codes_local(description: str) -> list[str]:
    description_lower = description.lower()
    matches = []
    for key, code in PROCESS_CODE_MAP.items():
        pattern = r'\b' + re.escape(key.lower()) + r'\b'
        if re.search(pattern, description_lower):
            matches.append(code)
    print(f"[DEBUG] Progetti rilevati nella descrizione: {matches}")
    return matches

def update_activity_description_from_tasks(activity: Activity, db: Session):
    tasks = db.query(Task).filter(Task.ticket.has(activity_id=activity.id)).all()
    if not tasks:
        return

    summary_lines = [f"{t.title}: {t.description}" for t in tasks]

    base_description = activity.description or ""
    base_parts = base_description.split("||")
    original_part = base_parts[0].strip() if base_parts else ""
    updated_description = f"{original_part} || {' | '.join(summary_lines)}"

    activity.description = updated_description
    db.merge(activity)
    db.commit()

def update_activity_owner(activity: Activity, new_owner_id: int, db: Session):
    if str(activity.accompagnato_da) != str(new_owner_id):
        activity.accompagnato_da = str(new_owner_id)
        db.merge(activity)
        db.commit()
        print(f"[INFO] Owner aggiornato per attività #{activity.id} → {new_owner_id}")

def generate_tickets_from_activity(activity: Activity, db: Session, sync_mode: bool = False):
    print(f"\n[INFO] Generazione ticket per attività #{activity.id}")
    print(f"[INFO] Descrizione attività: {activity.description}")

    suffix = str(activity.id)[-4:]
    owner_id = activity.accompagnato_da

    if int(activity.sub_type_id) == 63705:
        print("[INFO] Attività di tipo 'Incarico 24 mesi' trovata. Creazione ticket e task direttamente.")

        now = datetime.utcnow()
        ticket_code = f"TCK-I24-{suffix}-00"
        
        # 🔄 OWNER DINAMICO: Owner da associazioni
        i24_owner_id = get_service_owner('I24', db)
        if i24_owner_id:
            # Trova nome utente dall'ID
            from app.models.user import User
            user = db.query(User).filter(User.id == i24_owner_id).first()
            owner_name = f"{user.name} {user.surname}".strip() if user else "Owner I24"
            actual_owner_id = i24_owner_id  
        else:
            # Fallback alla logica originale
            actual_owner_id = 120385  # Barbara fallback
            owner_name = "Barbara Mercedes Romano"
        
        print(f"🎯 I24 Owner: {actual_owner_id} ({owner_name})")
        ticket = Ticket(
            activity_id=activity.id,
            ticket_code=ticket_code,
            title=f"Incarico 24 mesi - {ticket_code}",
            gtd_type="Project",
            owner_id=actual_owner_id,
            owner=owner_name,
            status=0,
            priority=1,
            description=activity.description,
            customer_name=activity.customer_name,
            created_at=now,
            updated_at=now,
            due_date=now + timedelta(days=3),
            account=activity.owner_name,
            company_id=activity.company_id,
            detected_services=activity.detected_services if activity.detected_services else [],
        )
        db.add(ticket)
        db.flush()

        # ✅ CREAZIONE TASK
        for task_title in DEFAULT_TASKS_I24:
            task = Task(
                ticket_id=ticket.id,
                title=task_title,
                status="aperto",
                priority="media",
                owner=str(ticket.owner_id),
                customer_name=ticket.customer_name,
                description=task_title,
                parent_id=None
            )
            db.add(task)

        db.commit()
        
        # ✅ INVIO NOTIFICA EMAIL APPENA CREATO IL TICKET
        try:
            if send_ticket_notification(ticket.id, db):
                logger.info(f"Email notification sent for I24 ticket {ticket.id}")
            else:
                logger.warning(f"Failed to send email notification for I24 ticket {ticket.id}")
        except Exception as e:
            logger.error(f"Error sending notification for I24 ticket {ticket.id}: {e}")
        
        update_activity_description_from_tasks(activity, db)

        print(f"[SUCCESS] Ticket I24 creato e notifica inviata: {ticket.ticket_code}")
        return [ticket]

    print("[INFO] Attività non di tipo 'Incarico 24 Mesi', logica non implementata.")
    return []

__all__ = ["generate_tickets_from_activity", "update_activity_owner"]
