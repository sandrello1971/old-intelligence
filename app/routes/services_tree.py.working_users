from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app.core.database import get_db
from app.models.sub_type import SubType
from app.models.user import User
from app.models.service_user_association import ServiceUserAssociation
from typing import List, Dict, Any, Optional
from pydantic import BaseModel
import logging

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/services-tree", tags=["Services Tree"])

# ===== PYDANTIC MODELS =====
class ServiceCreate(BaseModel):
    name: str
    code: str
    # NO description - non supportato dal modello SubType

class UserAssignmentCreate(BaseModel):
    user_id: str
    role: Optional[str] = "responsible"

# ===== HEALTH CHECK =====
@router.get("/health")
async def health_check():
    """Health check"""
    return {
        "status": "ok", 
        "message": "Sistema COMPLETO - CRUD Servizi + Gestione Utenti",
        "version": "1.0",
        "endpoints": [
            "GET / - Lista servizi",
            "GET /users - Lista utenti",
            "POST /services - Crea servizio",
            "PUT /services/{id} - Modifica servizio", 
            "DELETE /services/{id} - Elimina servizio",
            "POST /services/{id}/users - Assegna utente",
            "GET /services/{id}/users - Lista utenti servizio"
        ]
    }

# ===== LISTA SERVIZI =====
@router.get("/")
async def get_services_tree(db: Session = Depends(get_db)):
    """Restituisce l'alberatura completa dei servizi"""
    try:
        services = db.query(SubType).all()
        result = []
        
        for service in services:
            # Carica utenti associati
            associations = db.query(ServiceUserAssociation).filter(
                ServiceUserAssociation.service_id == service.id
            ).all()
            
            assigned_users = []
            for assoc in associations:
                user = db.query(User).filter(User.id == assoc.user_id).first()
                if user:
                    assigned_users.append({
                        "user_id": assoc.user_id,
                        "email": user.email,
                        "display_name": f"{getattr(user, 'name', '')} {getattr(user, 'surname', '')}".strip() or user.email,
                        "role": assoc.role
                    })
            
            service_data = {
                "id": service.id,
                "name": service.name,
                "code": service.code,
                "description": "",  # Sempre vuoto - campo non supportato
                "active": True,     # Sempre true - campo non supportato
                "assigned_users": assigned_users,
                "milestones": []    # Per compatibilità frontend
            }
            result.append(service_data)
        
        logger.info(f"✅ Caricati {len(result)} servizi")
        return result
        
    except Exception as e:
        logger.error(f"❌ Errore: {e}")
        return []

# ===== LISTA UTENTI =====
@router.get("/users")
async def get_available_users(db: Session = Depends(get_db)):
    """Restituisce lista utenti disponibili"""
    try:
        users = db.query(User).all()
        result = []
        for user in users:
            result.append({
                "id": user.id,
                "email": user.email,
                "display_name": f"{getattr(user, 'name', '')} {getattr(user, 'surname', '')}".strip() or user.email.split('@')[0],
                "role": getattr(user, 'role', 'user')
            })
        logger.info(f"✅ Caricati {len(result)} utenti")
        return result
    except Exception as e:
        logger.error(f"❌ Errore caricamento utenti: {e}")
        return []

# ===== CRUD SERVIZI (CORRETTI) =====
@router.post("/services")
async def create_service(service: ServiceCreate, db: Session = Depends(get_db)):
    """Crea un nuovo servizio"""
    try:
        # Verifica che il codice non esista già
        existing = db.query(SubType).filter(SubType.code == service.code).first()
        if existing:
            raise HTTPException(status_code=400, detail=f"Codice servizio '{service.code}' già esistente")
        
        # Crea servizio SOLO con campi supportati
        new_service = SubType(
            name=service.name,
            code=service.code.upper()
        )
        
        db.add(new_service)
        db.commit()
        db.refresh(new_service)
        
        logger.info(f"✅ SERVIZIO CREATO: {service.name} ({service.code})")
        
        return {
            "id": new_service.id,
            "name": new_service.name,
            "code": new_service.code,
            "message": "Servizio creato con successo"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"❌ Errore creazione servizio: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))

@router.delete("/services/{service_id}")
async def delete_service(service_id: int, db: Session = Depends(get_db)):
    """Elimina servizio"""
    try:
        service = db.query(SubType).filter(SubType.id == service_id).first()
        if not service:
            raise HTTPException(status_code=404, detail="Servizio non trovato")
        
        # Elimina associazioni utenti
        db.query(ServiceUserAssociation).filter(
            ServiceUserAssociation.service_id == service_id
        ).delete()
        
        # Elimina servizio
        service_name = service.name
        db.delete(service)
        db.commit()
        
        logger.info(f"✅ SERVIZIO ELIMINATO: {service_name}")
        
        return {"message": f"Servizio '{service_name}' eliminato con successo"}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"❌ Errore eliminazione servizio: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))

# ===== GESTIONE UTENTI =====
@router.post("/services/{service_id}/users")
async def assign_user_to_service(service_id: int, assignment: UserAssignmentCreate, db: Session = Depends(get_db)):
    """Assegna un utente a un servizio"""
    try:
        service = db.query(SubType).filter(SubType.id == service_id).first()
        if not service:
            raise HTTPException(status_code=404, detail="Servizio non trovato")
        
        user = db.query(User).filter(User.id == assignment.user_id).first()
        if not user:
            raise HTTPException(status_code=404, detail="Utente non trovato")
        
        existing = db.query(ServiceUserAssociation).filter(
            ServiceUserAssociation.service_id == service_id,
            ServiceUserAssociation.user_id == assignment.user_id
        ).first()
        
        if existing:
            raise HTTPException(status_code=400, detail="Utente già assegnato a questo servizio")
        
        new_association = ServiceUserAssociation(
            service_id=service_id,
            user_id=assignment.user_id,
            role=assignment.role
        )
        
        db.add(new_association)
        db.commit()
        db.refresh(new_association)
        
        logger.info(f"✅ UTENTE ASSEGNATO: {user.email} al servizio {service.name}")
        
        return {
            "message": f"Utente {user.email} assegnato al servizio {service.name}",
            "user_id": assignment.user_id,
            "service_id": service_id,
            "role": assignment.role
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"❌ Errore assegnazione utente: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/services/{service_id}/users")
async def get_service_users(service_id: int, db: Session = Depends(get_db)):
    """Restituisce utenti assegnati a un servizio"""
    try:
        service = db.query(SubType).filter(SubType.id == service_id).first()
        if not service:
            raise HTTPException(status_code=404, detail="Servizio non trovato")
        
        associations = db.query(ServiceUserAssociation).filter(
            ServiceUserAssociation.service_id == service_id
        ).all()
        
        result = []
        for assoc in associations:
            user = db.query(User).filter(User.id == assoc.user_id).first()
            if user:
                result.append({
                    "user_id": assoc.user_id,
                    "email": user.email, 
                    "display_name": f"{getattr(user, 'name', '')} {getattr(user, 'surname', '')}".strip(),
                    "role": assoc.role,
                    "created_at": assoc.created_at.isoformat() if assoc.created_at else None
                })
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"❌ Errore: {e}")
        return []
