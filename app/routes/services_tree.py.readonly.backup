from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app.core.database import get_db
from app.models.sub_type import SubType
from app.models.milestone import Milestone  
from app.models.phase_template import PhaseTemplate
from typing import List, Dict, Any
import logging

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/services-tree", tags=["Services Tree"])

@router.get("/")
async def get_services_tree(db: Session = Depends(get_db)):
    """
    Restituisce l'alberatura completa dei servizi con milestone e task templates
    """
    try:
        # Query per ottenere tutti i servizi attivi
        services = db.query(SubType).all()
        
        result = []
        
        for service in services:
            # Query per ottenere le milestone di questo servizio
            milestones = db.query(Milestone).filter(
                Milestone.project_type == service.code
            ).order_by(Milestone.order).all()
            
            milestones_data = []
            for milestone in milestones:
                # Query per ottenere i task templates di questa milestone
                task_templates = db.query(PhaseTemplate).filter(
                    PhaseTemplate.milestone_id == milestone.id
                ).order_by(PhaseTemplate.order).all()
                
                milestone_data = {
                    "id": milestone.id,
                    "name": milestone.name,
                    "order": milestone.order,
                    "project_type": milestone.project_type,
                    "sla_days": 5,  # Default value
                    "warning_days": 2,  # Default value 
                    "escalation_days": 3,  # Default value
                    "task_templates": [
                        {
                            "id": template.id,
                            "code": template.code,
                            "type": template.type,
                            "description": template.description,
                            "order": getattr(template, 'order', 0),
                            "parent_id": getattr(template, 'parent_id', None)
                        }
                        for template in task_templates
                    ]
                }
                milestones_data.append(milestone_data)
            
            service_data = {
                "id": service.id,
                "name": service.name,
                "code": service.code,
                "description": getattr(service, 'description', ''),
                "active": getattr(service, 'active', True),
                "milestones": milestones_data
            }
            result.append(service_data)
        
        logger.info(f"✅ Caricati {len(result)} servizi con {sum(len(s['milestones']) for s in result)} milestone")
        return result
        
    except Exception as e:
        logger.error(f"❌ Errore caricamento services tree: {e}")
        # Return basic test data in case of error
        return [
            {
                "id": 1,
                "name": "Test Service",
                "code": "TEST",
                "description": "Servizio di test",
                "active": True,
                "milestones": [
                    {
                        "id": 1,
                        "name": "Test Milestone",
                        "order": 1,
                        "project_type": "TEST",
                        "sla_days": 5,
                        "warning_days": 2,
                        "escalation_days": 3,
                        "task_templates": []
                    }
                ]
            }
        ]

@router.get("/health")
async def services_tree_health():
    """Health check per services tree"""
    return {
        "status": "ok", 
        "router": "services_tree",
        "message": "Router funzionante con modelli corretti!",
        "available_fields": ["id", "name", "order", "project_type"]
    }
