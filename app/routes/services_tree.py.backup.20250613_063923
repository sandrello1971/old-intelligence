from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app.core.database import get_db
from app.models.sub_type import SubType
from app.models.user import User
from app.models.service_user_association import ServiceUserAssociation
from app.models.milestone import Milestone
from app.models.phase_template import PhaseTemplate
from typing import List, Dict, Any, Optional
from pydantic import BaseModel
import logging

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/services-tree", tags=["Services Tree"])

# ===== PYDANTIC MODELS =====
class ServiceCreate(BaseModel):
    name: str
    code: str
    # NO description - non supportato dal modello SubType

class UserAssignmentCreate(BaseModel):
    user_id: str
    role: Optional[str] = "responsible"

# ===== HEALTH CHECK =====
@router.get("/health")
async def health_check():
    """Health check"""
    return {
        "status": "ok", 
        "message": "Sistema COMPLETO - CRUD Servizi + Gestione Utenti",
        "version": "1.0",
        "endpoints": [
            "GET / - Lista servizi",
            "GET /users - Lista utenti",
            "POST /services - Crea servizio",
            "PUT /services/{id} - Modifica servizio", 
            "DELETE /services/{id} - Elimina servizio",
            "POST /services/{id}/users - Assegna utente",
            "GET /services/{id}/users - Lista utenti servizio"
        ]
    }

# ===== LISTA SERVIZI =====
from app.models.milestone import Milestone
from app.models.phase_template import PhaseTemplate

@router.get("/")
async def get_services_tree(db: Session = Depends(get_db)):
    """Restituisce l'alberatura completa dei servizi CON milestone e task"""
    try:
        services = db.query(SubType).all()
        result = []
        
        for service in services:
            # Carica milestone per questo servizio
            milestones = db.query(Milestone).filter(
                Milestone.project_type == service.code
            ).order_by(Milestone.order).all()
            
            milestones_data = []
            for milestone in milestones:
                # Carica task templates per questa milestone
                task_templates = db.query(PhaseTemplate).filter(
                    PhaseTemplate.milestone_id == milestone.id
                ).order_by(PhaseTemplate.order).all()
                
                milestone_data = {
                    "id": milestone.id,
                    "name": milestone.name,
                    "order": milestone.order,
                    "project_type": milestone.project_type,
                    "sla_days": 5,
                    "warning_days": 2, 
                    "escalation_days": 3,
                    "task_templates": [
                        {
                            "id": template.id,
                            "code": template.code,
                            "type": template.type,
                            "description": template.description,
                            "order": getattr(template, 'order', 0),
                            "parent_id": getattr(template, 'parent_id', None)
                        }
                        for template in task_templates
                    ]
                }
                milestones_data.append(milestone_data)
            
            # Carica utenti associati
            associations = db.query(ServiceUserAssociation).filter(
                ServiceUserAssociation.service_id == service.id
            ).all()
            
            assigned_users = []
            for assoc in associations:
                user = db.query(User).filter(User.id == assoc.user_id).first()
                if user:
                    assigned_users.append({
                        "user_id": assoc.user_id,
                        "email": user.email,
                        "display_name": f"{getattr(user, 'name', '')} {getattr(user, 'surname', '')}".strip() or user.email,
                        "role": assoc.role
                    })
            
            service_data = {
                "id": service.id,
                "name": service.name,
                "code": service.code,
                "description": "",
                "active": True,
                "assigned_users": assigned_users,
                "milestones": milestones_data  # ORA CON DATI REALI!
            }
            result.append(service_data)
        
        logger.info(f"✅ Caricati {len(result)} servizi con milestone e utenti")
        return result
        
    except Exception as e:
        logger.error(f"❌ Errore: {e}")
        return []

# ===== LISTA UTENTI =====
@router.get("/users")
async def get_available_users(db: Session = Depends(get_db)):
    """Restituisce lista utenti disponibili"""
    try:
        users = db.query(User).all()
        result = []
        for user in users:
            result.append({
                "id": user.id,
                "email": user.email,
                "display_name": f"{getattr(user, 'name', '')} {getattr(user, 'surname', '')}".strip() or user.email.split('@')[0],
                "role": getattr(user, 'role', 'user')
            })
        logger.info(f"✅ Caricati {len(result)} utenti")
        return result
    except Exception as e:
        logger.error(f"❌ Errore caricamento utenti: {e}")
        return []

# ===== CRUD SERVIZI (CORRETTI) =====
@router.post("/services")
async def create_service(service: ServiceCreate, db: Session = Depends(get_db)):
    """Crea un nuovo servizio"""
    try:
        # Verifica che il codice non esista già
        existing = db.query(SubType).filter(SubType.code == service.code).first()
        if existing:
            raise HTTPException(status_code=400, detail=f"Codice servizio '{service.code}' già esistente")
        
        # Crea servizio SOLO con campi supportati
        new_service = SubType(
            name=service.name,
            code=service.code.upper()
        )
        
        db.add(new_service)
        db.commit()
        db.refresh(new_service)
        
        logger.info(f"✅ SERVIZIO CREATO: {service.name} ({service.code})")
        
        return {
            "id": new_service.id,
            "name": new_service.name,
            "code": new_service.code,
            "message": "Servizio creato con successo"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"❌ Errore creazione servizio: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))

@router.delete("/services/{service_id}")
async def delete_service(service_id: int, db: Session = Depends(get_db)):
    """Elimina servizio"""
    try:
        service = db.query(SubType).filter(SubType.id == service_id).first()
        if not service:
            raise HTTPException(status_code=404, detail="Servizio non trovato")
        
        # Elimina associazioni utenti
        db.query(ServiceUserAssociation).filter(
            ServiceUserAssociation.service_id == service_id
        ).delete()
        
        # Elimina servizio
        service_name = service.name
        db.delete(service)
        db.commit()
        
        logger.info(f"✅ SERVIZIO ELIMINATO: {service_name}")
        
        return {"message": f"Servizio '{service_name}' eliminato con successo"}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"❌ Errore eliminazione servizio: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))

# ===== GESTIONE UTENTI =====
@router.post("/services/{service_id}/users")
async def assign_user_to_service(service_id: int, assignment: UserAssignmentCreate, db: Session = Depends(get_db)):
    """Assegna un utente a un servizio"""
    try:
        service = db.query(SubType).filter(SubType.id == service_id).first()
        if not service:
            raise HTTPException(status_code=404, detail="Servizio non trovato")
        
        user = db.query(User).filter(User.id == assignment.user_id).first()
        if not user:
            raise HTTPException(status_code=404, detail="Utente non trovato")
        
        existing = db.query(ServiceUserAssociation).filter(
            ServiceUserAssociation.service_id == service_id,
            ServiceUserAssociation.user_id == assignment.user_id
        ).first()
        
        if existing:
            raise HTTPException(status_code=400, detail="Utente già assegnato a questo servizio")
        
        new_association = ServiceUserAssociation(
            service_id=service_id,
            user_id=assignment.user_id,
            role=assignment.role
        )
        
        db.add(new_association)
        db.commit()
        db.refresh(new_association)
        
        logger.info(f"✅ UTENTE ASSEGNATO: {user.email} al servizio {service.name}")
        
        return {
            "message": f"Utente {user.email} assegnato al servizio {service.name}",
            "user_id": assignment.user_id,
            "service_id": service_id,
            "role": assignment.role
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"❌ Errore assegnazione utente: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/services/{service_id}/users")
async def get_service_users(service_id: int, db: Session = Depends(get_db)):
    """Restituisce utenti assegnati a un servizio"""
    try:
        service = db.query(SubType).filter(SubType.id == service_id).first()
        if not service:
            raise HTTPException(status_code=404, detail="Servizio non trovato")
        
        associations = db.query(ServiceUserAssociation).filter(
            ServiceUserAssociation.service_id == service_id
        ).all()
        
        result = []
        for assoc in associations:
            user = db.query(User).filter(User.id == assoc.user_id).first()
            if user:
                result.append({
                    "user_id": assoc.user_id,
                    "email": user.email, 
                    "display_name": f"{getattr(user, 'name', '')} {getattr(user, 'surname', '')}".strip(),
                    "role": assoc.role,
                    "created_at": assoc.created_at.isoformat() if assoc.created_at else None
                })
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"❌ Errore: {e}")
        return []

# ===== PYDANTIC MODELS PER MILESTONE E TASK =====
class MilestoneCreate(BaseModel):
    name: str
    order: int
    sla_days: Optional[int] = 5
    warning_days: Optional[int] = 2
    escalation_days: Optional[int] = 3

class TaskTemplateCreate(BaseModel):
    code: str
    type: str
    description: str
    order: Optional[int] = 1

# ===== CRUD MILESTONE =====
@router.post("/services/{service_id}/milestones")
async def create_milestone(service_id: int, milestone: MilestoneCreate, db: Session = Depends(get_db)):
    """Crea una nuova fase per un servizio"""
    try:
        service = db.query(SubType).filter(SubType.id == service_id).first()
        if not service:
            raise HTTPException(status_code=404, detail="Servizio non trovato")
        
        new_milestone = Milestone(
            name=milestone.name,
            project_type=service.code,
            order=milestone.order
        )
        
        db.add(new_milestone)
        db.commit()
        db.refresh(new_milestone)
        
        logger.info(f"✅ FASE CREATA: {milestone.name} per {service.code}")
        
        return {
            "id": new_milestone.id,
            "name": new_milestone.name,
            "order": new_milestone.order,
            "project_type": new_milestone.project_type,
            "sla_days": milestone.sla_days,
            "warning_days": milestone.warning_days,
            "escalation_days": milestone.escalation_days,
            "message": "Fase creata con successo"
        }
        
    except Exception as e:
        logger.error(f"❌ Errore creazione fase: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))

@router.put("/milestones/{milestone_id}")
async def update_milestone(milestone_id: int, milestone: MilestoneCreate, db: Session = Depends(get_db)):
    """Aggiorna una fase esistente"""
    try:
        db_milestone = db.query(Milestone).filter(Milestone.id == milestone_id).first()
        if not db_milestone:
            raise HTTPException(status_code=404, detail="Fase non trovata")
        
        db_milestone.name = milestone.name
        db_milestone.order = milestone.order
        
        db.commit()
        db.refresh(db_milestone)
        
        return {
            "id": db_milestone.id,
            "name": db_milestone.name,
            "order": db_milestone.order,
            "message": "Fase aggiornata con successo"
        }
        
    except Exception as e:
        logger.error(f"❌ Errore aggiornamento fase: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))

@router.delete("/milestones/{milestone_id}")
async def delete_milestone(milestone_id: int, db: Session = Depends(get_db)):
    """Elimina fase e task template collegati"""
    try:
        milestone = db.query(Milestone).filter(Milestone.id == milestone_id).first()
        if not milestone:
            raise HTTPException(status_code=404, detail="Fase non trovata")
        
        linked_tasks = db.query(PhaseTemplate).filter(PhaseTemplate.milestone_id == milestone_id).count()
        
        db.query(PhaseTemplate).filter(PhaseTemplate.milestone_id == milestone_id).delete()
        db.delete(milestone)
        db.commit()
        
        return {
            "message": f"Fase eliminata con successo (eliminati anche {linked_tasks} task collegati)"
        }
        
    except Exception as e:
        logger.error(f"❌ Errore eliminazione fase: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))

# ===== CRUD TASK TEMPLATE =====
@router.post("/milestones/{milestone_id}/templates")
async def create_task_template(milestone_id: int, template: TaskTemplateCreate, db: Session = Depends(get_db)):
    """Crea task template per fase"""
    try:
        milestone = db.query(Milestone).filter(Milestone.id == milestone_id).first()
        if not milestone:
            raise HTTPException(status_code=404, detail="Fase non trovata")
        
        new_template = PhaseTemplate(
            code=template.code,
            type=template.type,
            description=template.description,
            milestone_id=milestone_id,
            order=template.order
        )
        
        db.add(new_template)
        db.commit()
        db.refresh(new_template)
        
        return {
            "id": new_template.id,
            "code": new_template.code,
            "description": new_template.description,
            "message": "Task template creato con successo"
        }
        
    except Exception as e:
        logger.error(f"❌ Errore creazione task: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))

@router.put("/templates/{template_id}")
async def update_task_template(template_id: int, template: TaskTemplateCreate, db: Session = Depends(get_db)):
    """Aggiorna task template"""
    try:
        db_template = db.query(PhaseTemplate).filter(PhaseTemplate.id == template_id).first()
        if not db_template:
            raise HTTPException(status_code=404, detail="Template non trovato")
        
        db_template.code = template.code
        db_template.type = template.type
        db_template.description = template.description
        db_template.order = template.order
        
        db.commit()
        db.refresh(db_template)
        
        return {
            "id": db_template.id,
            "description": db_template.description,
            "message": "Task template aggiornato con successo"
        }
        
    except Exception as e:
        logger.error(f"❌ Errore aggiornamento task: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))

@router.delete("/templates/{template_id}")
async def delete_task_template(template_id: int, db: Session = Depends(get_db)):
    """Elimina task template"""
    try:
        template = db.query(PhaseTemplate).filter(PhaseTemplate.id == template_id).first()
        if not template:
            raise HTTPException(status_code=404, detail="Template non trovato")
        
        db.delete(template)
        db.commit()
        
        return {"message": "Task template eliminato con successo"}
        
    except Exception as e:
        logger.error(f"❌ Errore eliminazione task: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))
