from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session, joinedload
from app.core.database import get_db
from app.models.task import Task
from app.models.ticket import Ticket
from app.models.user import User
from app.services.ticket_generator import update_activity_description_from_tasks
from app.services.crm_parser import extract_opportunities_from_description
from app.services.opportunity_creator import create_and_sync_opportunities
from app.utils.service_detection import extract_services_from_description
from app.services.crm_sync import update_crm_ticket_description  # ✅ Assicurati che esista

router = APIRouter(tags=["tasks"])

@router.get("/tasks/{task_id}")
def get_task_detail(task_id: int, db: Session = Depends(get_db)):
    task = (
        db.query(Task)
        .options(
            joinedload(Task.owner_ref),
            joinedload(Task.predecessor_ref),
            joinedload(Task.ticket).joinedload(Ticket.tasks)
        )
        .filter(Task.id == task_id)
        .first()
    )

    if not task:
        raise HTTPException(status_code=404, detail="Task non trovato")

    owner_user = db.query(User).filter(User.id == str(task.owner)).first() if task.owner else None
    due_date = task.ticket.due_date if task.ticket else None

    return {
        "id": task.id,
        "ticket_id": task.ticket_id,
        "ticket_code": task.ticket.ticket_code if task.ticket else None,
        "title": task.title,
        "description": task.description,
        "status": task.status,
        "priority": task.priority,
        "owner": task.owner,
        "owner_name": f"{owner_user.name} {owner_user.surname}" if owner_user else None,
        "due_date": due_date,
        "predecessor_id": task.predecessor_id,
        "predecessor_title": task.predecessor_ref.title if task.predecessor_ref else None,
        "siblings": [
            {"id": t.id, "title": t.title}
            for t in (task.ticket.tasks if task.ticket else [])
            if t.id != task.id
        ]
    }

@router.patch("/tasks/{task_id}")
def update_task(task_id: int, payload: dict, db: Session = Depends(get_db)):
    task = db.query(Task).filter(Task.id == task_id).first()
    if not task:
        raise HTTPException(status_code=404, detail="Task non trovato")

    update_fields = {
        "description": str,
        "status": str,
        "priority": str,
        "owner": str,
        "predecessor_id": int,
        "parent_id": int
    }

    for field, cast in update_fields.items():
        if field in payload:
            setattr(task, field, cast(payload[field]) if payload[field] is not None else None)

    if "services" in payload and task.ticket:
        task.ticket.detected_services = payload["services"]

    db.commit()
    db.refresh(task)
    # ✅ Chiusura automatica del ticket se tutti i task sono chiusi
    if task.ticket_id:
        all_tasks = db.query(Task).filter(Task.ticket_id == task.ticket_id).all()
        ticket = db.query(Ticket).filter(Ticket.id == task.ticket_id).first()

        if all(t.status == "chiuso" for t in all_tasks) and ticket.status != 2:
            ticket.status = 2  # chiuso
            db.commit()

    # ✅ Sync activity description
    if task.ticket and task.ticket.activity:
        update_activity_description_from_tasks(task.ticket.activity, db)

    # ✅ Se lo status è stato cambiato in "chiuso", aggiorna anche su CRM
    if payload.get("status") == "chiuso" and task.ticket:
        update_crm_ticket_description(task.ticket, task)

    owner_name = None
    if task.owner_ref:
        owner_name = f"{task.owner_ref.name} {task.owner_ref.surname}".strip()

    return {
        "id": task.id,
        "title": task.title,
        "description": task.description,
        "status": task.status,
        "priority": task.priority,
        "ticket_id": task.ticket_id,
        "ticket_code": task.ticket.ticket_code if task.ticket else None,
        "owner": task.owner,
        "owner_name": owner_name,
        "predecessor_id": task.predecessor_id,
        "predecessor_title": task.predecessor_ref.title if task.predecessor_ref else None,
        "parent_id": task.parent_id,
        "parent_title": task.parent_ref.title if task.parent_ref else None
    }

@router.post("/tasks/{task_id}/confirm-create-opportunities")
def confirm_create_opportunities(task_id: int, db: Session = Depends(get_db)):
    task = db.query(Task).filter(Task.id == task_id).first()
    if not task:
        raise HTTPException(status_code=404, detail="Task non trovato")

    ticket = db.query(Ticket).filter(Ticket.id == task.ticket_id).first()
    if not ticket:
        raise HTTPException(status_code=404, detail="Ticket non trovato")

    if not ticket.activity:
        raise HTTPException(status_code=404, detail="Attività non collegata al ticket")

    detected_services = ticket.activity.detected_services

    if not detected_services:
        services = extract_services_from_description(ticket.activity.description or "")
        ticket.activity.detected_services = ", ".join(services)
        db.commit()
        detected_services = ", ".join(services)

    return {
        "message": "Servizi rilevati e salvati",
        "detected_services": [s.strip() for s in detected_services.split(",") if s.strip()],
        "activity_id": ticket.activity.id,
        "ticket_code": ticket.ticket_code
    }

@router.get("/tasks")
def list_tasks(ticket_id: int = Query(None), db: Session = Depends(get_db)):
    if ticket_id:
        tasks = db.query(Task).filter(Task.ticket_id == ticket_id).all()
    else:
        tasks = db.query(Task).all()

    return [
        {
            "id": t.id,
            "title": t.title,
            "description": t.description,
            "status": t.status,
            "priority": t.priority,
            "ticket_id": t.ticket_id,
            "owner": t.owner,
            "predecessor_id": t.predecessor_id,
            "milestone_id": t.milestone_id
        }
        for t in tasks
    ]
